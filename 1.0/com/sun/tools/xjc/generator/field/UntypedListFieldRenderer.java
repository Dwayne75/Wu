package com.sun.tools.xjc.generator.field;

import com.sun.codemodel.JBlock;
import com.sun.codemodel.JClass;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JConditional;
import com.sun.codemodel.JDocComment;
import com.sun.codemodel.JExpr;
import com.sun.codemodel.JExpression;
import com.sun.codemodel.JForLoop;
import com.sun.codemodel.JInvocation;
import com.sun.codemodel.JMethod;
import com.sun.codemodel.JOp;
import com.sun.codemodel.JVar;
import com.sun.tools.xjc.generator.ClassContext;
import com.sun.tools.xjc.generator.JavadocBuilder;
import com.sun.tools.xjc.generator.MethodWriter;
import com.sun.tools.xjc.grammar.FieldUse;
import java.util.List;

public class UntypedListFieldRenderer
  extends AbstractListFieldRenderer
{
  protected UntypedListFieldRenderer(ClassContext context, FieldUse fu, JClass coreList)
  {
    super(context, fu, coreList);
  }
  
  public void generateAccessors()
  {
    JMethod $get = this.writer.declareMethod(List.class, "get" + this.fu.name);
    this.writer.javadoc().appendComment(this.fu.getJavadoc());
    JBlock body = $get.body();
    if (this.$defValues != null)
    {
      JBlock then = body._if(JOp.cand(hasSetValue().not(), ref(false).invoke("isEmpty")))._then();
      
      JForLoop loop = then._for();
      JVar $i = loop.init(this.codeModel.INT, "__i", JExpr.lit(0));
      loop.test($i.lt(this.$defValues.ref("length")));
      loop.update($i.incr());
      loop.body().invoke(ref(true), "add").arg(box(this.$defValues.component($i)));
      
      then.invoke(ref(true), "setModified").arg(JExpr.FALSE);
    }
    body._return(ref(false));
    
    this.writer.javadoc().appendComment("Gets the value of the " + this.fu.name + " property.\n\n" + "<p>\n" + "This accessor method returns a reference to the live list,\n" + "not a snapshot. Therefore any modification you make to the\n" + "returned list will be present inside the JAXB object.\n" + "This is why there is not a <CODE>set</CODE> method for the " + this.fu.name + " property.\n" + "\n" + "<p>\n" + "For example, to add a new item, do as follows:\n" + "<pre>\n" + "   get" + this.fu.name + "().add(newItem);\n" + "</pre>\n" + "\n\n");
    
    this.writer.javadoc().appendComment("<p>\nObjects of the following type(s) are allowed in the list\n" + JavadocBuilder.listPossibleTypes(this.fu));
    if (this.$defValues != null)
    {
      JMethod $delete = this.writer.declareMethod(this.codeModel.VOID, "delete" + this.fu.name);
      this.writer.javadoc().setDeprecated("this method is incorrectly generated by previous\nreleases of the RI. This method remains here just to make \nthe generated code backward compatible.\nApplications should <strong>NOT</strong> rely on this method, and\nif it needs this capability, it should use the unset" + this.fu.name + " method.\n" + "To generate the unset" + this.fu.name + " method, please use \n" + "the <code>generateIsSetMethod</code> attribute on\n" + "<code>globalBindings</code> or <code>property</code> customization.");
      
      unsetValues($delete.body());
    }
  }
}


/* Location:              C:\Games\SteamLibrary\steamapps\common\Wurm Unlimited Dedicated Server\server.jar!\1.0\com\sun\tools\xjc\generator\field\UntypedListFieldRenderer.class
 * Java compiler version: 2 (46.0)
 * JD-Core Version:       0.7.1
 */